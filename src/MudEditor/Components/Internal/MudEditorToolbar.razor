@using MudBlazor.Extensions
@namespace MudBlazor.Extensions.Internal

<MudPaper Class="mud-editor-toolbar d-flex justify-start flex-grow-1 flex-wrap gap-2 px-1 py-1">
	@if (Toolbar!.ShowFontControls)
	{
	    <div class="flex-grow-0">
			<MudSelect T="string" @bind-Value="Font" Dense="true" Variant="Variant.Outlined">
				@if (Fonts != null)
				{
					foreach (var font in Fonts)
					{
						<MudSelectItem Value="@font"/>
					}
				}
				else
				{
					<MudSelectItem Value="@("")"/>
					<MudSelectItem Value="@("serif")"/>
					<MudSelectItem Value="@("monospace")"/>
				}
			</MudSelect>
		</div>
	}

	@if (Toolbar.ShowSizeControls)
	{
		<div class="flex-grow-0">
			<MudSelect T="string" Value="@("normal")" Dense="true" Variant="Variant.Outlined">
				<MudSelectItem Value="@("small")"/>
				<MudSelectItem Value="@("normal")"/>
				<MudSelectItem Value="@("large")"/>
				<MudSelectItem Value="@("huge")"/>
			</MudSelect>
		</div>
	}

	@if (Toolbar.ShowStyleControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Color="Color.Primary" Icon="@Icons.Filled.FormatBold" Size="Size.Small" Title="bold"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatItalic" Size="Size.Small" Title="italic"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatUnderlined" Size="Size.Small" Title="underline"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatStrikethrough" Size="Size.Small" Title="strike"></MudIconButton>
		</MudButtonGroup>
	}

	@if (Toolbar.ShowColorControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudEditorColorPicker/>
			<MudEditorColorPicker Background="true"/>
		</MudButtonGroup>
	}

	@*	@if (Toolbar.ShowHeaderControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Icon="" Size="Size.Small" Title="bold"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="" Size="Size.Small" Title="bold"></MudIconButton>
		</MudButtonGroup>
	}*@
	@if (Toolbar.ShowQuotationControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatQuote" Size="Size.Small" Title="bold"></MudIconButton>
		</MudButtonGroup>
	}

	@if (Toolbar.ShowCodeBlockControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.Code" Size="Size.Small" Title="bold"></MudIconButton>
		</MudButtonGroup>
	}

	@if (Toolbar.ShowListControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatListNumbered" Size="Size.Small" Title="bold"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatListBulleted" Size="Size.Small" Title="bold"></MudIconButton>
		</MudButtonGroup>
	}

	@if (Toolbar.ShowIndentationControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatIndentIncrease" Size="Size.Small" Title="bold"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatIndentDecrease" Size="Size.Small" Title="bold"></MudIconButton>
		</MudButtonGroup>
	}

	@if (Toolbar.ShowAlignmentControls)
	{
	    <MudEditorValueGroup Settings="MudEditorEvent.AlignmentMenu.Settings()" ></MudEditorValueGroup>
	}


	@if (Toolbar.ShowDirectionControls)
	{
		<MudEditorValueGroup Settings="MudEditorEvent.DirectionToggle.Settings()" ></MudEditorValueGroup>
	}

	@if (Toolbar.ShowHypertextLinkControls || Toolbar.ShowInsertImageControls || Toolbar.ShowEmbedVideoControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">

			@if (Toolbar.ShowHypertextLinkControls)
			{
				<MudIconButton Class="pa-0" Icon="@Icons.Filled.InsertLink" Size="Size.Small" Title="bold"></MudIconButton>
			}

			@if (Toolbar.ShowInsertImageControls)
			{
				<MudIconButton Class="pa-0" Icon="@Icons.Filled.Image" Size="Size.Small" Title="bold"></MudIconButton>
			}

			@if (Toolbar.ShowEmbedVideoControls)
			{
				<MudIconButton Class="pa-0" Icon="@Icons.Filled.OndemandVideo" Size="Size.Small" Title="bold"></MudIconButton>
			}
		</MudButtonGroup>
	}

	@if (Toolbar.ShowMathControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Icon="@MudEditorIcons.Icons.Fx" Size="Size.Small" Title="bold"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.Subscript" Size="Size.Small" Title="subscript"></MudIconButton>
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.Superscript" Size="Size.Small" Title="superscript"></MudIconButton>
		</MudButtonGroup>
	}

	@if (Toolbar.ShowCleanFormattingControls)
	{
		<MudButtonGroup Variant="Variant.Outlined">
			<MudIconButton Class="pa-0" Icon="@Icons.Filled.FormatClear" Size="Size.Small" Title="bold"></MudIconButton>
		</MudButtonGroup>
	}
</MudPaper>

@code {

	[CascadingParameter, EditorRequired]
	public MudEditor? Editor { get; set; }

	[CascadingParameter]
	public MudEditorToolbarConfig? Toolbar { get; set; }

	[CascadingParameter]
	public int Elevation { set; get; }

	[CascadingParameter]
	public bool Outlined { set; get; }


	[CascadingParameter]
	public List<string>? Fonts
	{
		get => _fonts;
		set
		{
			_fonts = value;
			Font = Fonts?[0] ?? null;
		}
	}

	private string? Font { get; set; }

	private List<string>? _fonts;

    private bool _menuOpen;

    //protected override Task OnParametersSetAsync()
    //{
    //	return base.OnParametersSetAsync();
    //}
    private void ToggleOpen()
    {
        _menuOpen = !_menuOpen;
    }

}